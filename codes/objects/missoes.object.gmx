<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Criando a estrutura 
//criando matriz para armazenar as missões
enum missao{
   coleta_simples, // é a identificação 0, quando chamar é o mesmo que dizer 0
   coleta_media,
   coleta_avancada 
}
var missao_matriz = scr_array//array - matriz controladora
(
         //array - primeira missão
         scr_array
         (
          "Missao 1",
          0,
          scr_array("Colete a placa-mãe", "Colete o processador", " ")
         ),
         //array - segunda missão
          scr_array
          (
           "Missao 2",
           1,
           scr_array("Colete a Memória RAM", "Colete o HD", "Colete o Mouse", "")
          ),
          //array - terceira missão
          scr_array
          (
           "Missao 3",
           2,
           scr_array("Colete o Monitor", "Colete o Teclado", "Colete o Windows", "")
          )
          
);
         

ds_missao = criar_ds_grid_da_matriz(missao_matriz);
ds_missao_num = ds_grid_height(ds_missao);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_grid_destroy(ds_missao);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var grid = ds_missao;
var i = 0; repeat (ds_missao_num){
   switch(i){
   //missao 1
   case missao.coleta_simples:
      switch(grid[# 1, i]){
        case -1: break; //verifica atividade da missão
        //primeira etapa 
        case 0:
           with(obj_ada){
              var inst = instance_place(x, y, fase1_pai);
              if (inst != noone){ //checando se a colisão é verdadeira
                with(inst){
                instance_destroy();
                obj_score.p_score += 200;
                grid[# 1, i] +=1; //adiciona 1 a etapa
                }}} 
           break;
        //segunda etapa
        case 1:
        with(obj_ada){
              var inst = instance_place(x, y, fase1_pai);
              if (inst != noone){
                with(inst){
                instance_destroy();
                obj_score.p_score += 200; 
                grid[# 1, i] +=1;
                }}} 
        break;
        //completa
        case 2:
               if (fase1_pai != instance_exists(fase1_pai)){
                with(obj_ada){
                 if(room = rm_level_1 &amp;&amp; obj_score.p_score &gt;= 400){
                  room_goto(rm_level_2);}
                  }} 
        break;}
       break;
        
        
      //missao 2  
      case missao.coleta_media:
        switch(grid[# 1, i]){
        case -1: break;
        //primeira etapa 
        case 0:
           with(obj_ada){
              var inst = instance_place(x, y, fase2_pai);
            if (inst != noone){ //checando se a colisão é verdadeira
              with(inst){
                instance_destroy();
                obj_score.p_score += 200;
                grid[# 1, i] +=1; //adiciona 1 a etapa
                }}} 
         break;
        //segunda etapa
        case 1:
        with(obj_ada){
              var inst = instance_place(x, y, fase2_pai);
           if (inst != noone){
                with(inst){
                instance_destroy();
                obj_score.p_score += 200; 
                grid[# 1, i] +=1;
                }}} 
          break;
        //terceira etapa
        case 2:
        with(obj_ada){
              var inst = instance_place(x, y, fase2_pai);
              if (inst != noone){
                with(inst){
                instance_destroy();
                obj_score.p_score += 200; 
                grid[# 1, i] +=1;
                }}} 
         break;
        //completa
        case 3:
               if (fase2_pai != instance_exists(fase2_pai)){
                 with(obj_ada){
                if(room = rm_level_2 &amp;&amp; obj_score.p_score &gt;= 600){
                room_goto(rm_level_3);}
                 }} break;
        }
        break;
        
      //missão 3
        case missao.coleta_avancada:
        switch(grid[# 1, i]){
        case -1: break;
        //primeira etapa 
        case 0:
           with(obj_ada){
              var inst = instance_place(x, y, fase3_pai);
              if (inst != noone){ //checando se a colisão é verdadeira
                with(inst){
                instance_destroy();
                obj_score.p_score += 200;
                grid[# 1, i] +=1; //adiciona 1 a etapa
                }}} 
         break;
        //segunda etapa
        case 1:
        with(obj_ada){
              var inst = instance_place(x, y, fase3_pai);
              if (inst != noone){
                with(inst){
                instance_destroy();
                obj_score.p_score += 200; 
                grid[# 1, i] +=1;
                }}} 
        break;
        //terceira etapa
        case 2:
        with(obj_ada){
              var inst = instance_place(x, y, fase3_pai);
              if (inst != noone){
                with(inst){
                instance_destroy();
                obj_score.p_score += 200; 
                grid[# 1, i] +=1;
                }}} 
        break;
        //completa
        case 3:
               if (fase3_pai != instance_exists(fase3_pai)){
                if(room = rm_level_3 &amp;&amp; obj_score.p_score &gt;= 600){
                room_goto(rm_gameover);
                if(room = rm_gameover){
                instance_destroy(obj_ada);
                game_restart();
                }
                }
              }
        break;
      }
   break;
}
  i++;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


var str = "";
var i =0; repeat (ds_missao_num){
    switch(i){
    case missao.coleta_simples:
    if (room = rm_level_1){
    var stage = ds_missao[# 1, i];
    if(stage != -1){
    var array = ds_missao[# 2, i];
    str += "  " + string_upper(ds_missao[# 0, i]) + ": " + string(stage) + "/2 itens coletados";
    if(stage = 2){
     audio_play_sound(snd_levelup, 1, false);
    }
    }} 
    break;
    
    case missao.coleta_media:
    if (room = rm_level_2){
    var stage = ds_missao[# 1, i];
    if(stage != -1){
    var array = ds_missao[# 2, i];
    str += "  " + string_upper(ds_missao[# 0, i]) + ": " + string(stage) + "/3 itens coletados";
    if(stage = 3){
     audio_play_sound(snd_levelup, 1, false);
    }
    }} 
    break;
    
    case missao.coleta_avancada:
    if (room = rm_level_3){
    var stage = ds_missao[# 1, i];
    if(stage != -1){
    var array = ds_missao[# 2, i];
    str += "  " + string_upper(ds_missao[# 0, i]) + ": " + string(stage) + "/3 itens coletados";
    if(stage = 3){
     audio_play_sound(snd_levelup, 1, false);
    }
    }} 
    break;
    
    }
    i++;
    }
draw_set_font(font_principal);
draw_text_transformed(500, 60 ,str, 1, 1, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
